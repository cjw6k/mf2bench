#!/bin/bash

with_ministat=$(which ministat)
[[ $? -ne 0 ]] && echo -e "\nNOTE: mf2bench requires ministat\n      https://github.com/codahale/ministat\n" && exit 1

if [[ -z $MONO ]]; then
	source_color=$(printf '\e[38;5;118m')
	source_pad_color=$(printf '\e[38;5;23m')
	parser_color=$(printf '\e[38;5;173m')
	parser_pad_color=$(printf '\e[38;5;235m')
	parser_fail_color=$(printf '\e[38;5;94m')
	fail_color=$(printf '\e[38;5;240m')
	reset=$(printf '\e[0m')
fi

if [[ -z $1 ]]; then
	iterations=3
else
	iterations=$1
fi

parsers=$(cat .mf2bench.conf)

report() {
	pad="."
	padlength=53

	if [[ -n $3 ]]; then
		echo -n "${parser_fail_color}$1${parser_pad_color} "
	else
		echo -n "${parser_color}$1${parser_pad_color} "
	fi

	pad_count=$(( $padlength - ${#1} - ${#2} - 2 ))

	while [ $pad_count -gt 0 ]; do
		pad_count=$(( $pad_count - 1 ))
		echo -n "$pad"
	done

	if [[ -n $3 ]]; then
		printf "${reset} ${fail_color}%s${reset}\n" "$2"
	else
		printf "${reset} %s\n" "$2"
	fi
}

[[ -d var/timing ]] && rm -r var/timing

idx=0
for sample in var/sources/*; do
	idx=$(( $idx + 1))
	domain=${sample#"var/sources/"}
	simple_identity="$(echo $domain | sed 's/___/\//')"
	echo -en "${source_pad_color}=====================================================\r"
	si_padding=$(( ( 53 - ${#simple_identity} ) / 2 ))
	while [ $si_padding -gt 0 ]; do
		echo -n "="
		si_padding=$(( $si_padding - 1 ))
	done
	echo " ${source_color}$simple_identity${reset} "
	OLD_IFS=$IFS
	IFS=";"
	for parser in ${parsers[@]}; do
		OLD_IFS=$IFS
		IFS="|"
		selector=0
		for sub in ${parser[@]}; do
			if [[ 0 -eq $selector ]]; then
				name=$(echo -e "${sub}" | tr -d '[:space:]')
			elif [[ 1 -eq $selector  ]]; then
				time_exec=$(echo -e "${sub}")
			else
				json_exec=$(echo -e "${sub}")
			fi
			selector=$(( $selector + 1 ))
		done
		IFS=$OLD_IFS

		if [[ 3 -eq $selector ]]; then
			[[ ! -d "$sample/$name" ]] && mkdir -p "$sample/$name"
			[[ ! -d "var/timing/$name" ]] && mkdir -p "var/timing/$name"
			eval "$time_exec $sample/html http://$(echo $domain | sed 's/___/\//') $iterations" > "$sample/$name/timing" 2>/dev/null
			if [[ $? -eq 0 ]]; then
				eval "$json_exec $sample/html http://$(echo $domain | sed 's/___/\//') 0" > "$sample/$name/json" 2>/dev/null
				stat=$(ministat "$sample/$name/timing" -A)
				average=$(echo "$stat" | tail -n 1 | awk '{print($6)}')
				printf -v result "%0.f" $average
				report $name "$result Âµs"
				echo "$average" >>  "var/timing/$name/timing"

			else
				report $name "FAIL" 1
			fi
		fi
	done
	echo -e "${source_pad_color}-----------------------------------------------------${reset}\n"
	IFS=$OLD_IFS
done

if [[ 2 -lt $idx ]]; then
	data=()
	idz=0
	for timing in var/timing/*/*/*; do
		data[$idz]="$timing"
		idz=$(( $idz + 1 ))
		[[ $idz -gt 6 ]] && break
	done
	[[ -n $with_ministat ]] && ministat ${data[@]} -s
fi
